# Socket.IO反向代理配置 - 添加到网站的配置文件中

# 1. 首先确保在网站设置中开启了反向代理
# 2. 添加如下配置到网站的Nginx配置文件中

# Socket.IO路径配置
location /socket.io/ {
    # 确保这里的地址与您的Node.js服务器地址匹配
    proxy_pass http://127.0.0.1:5000/socket.io/;
    
    # WebSocket支持
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    
    # 传递主机和IP信息
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # 禁用缓存
    proxy_cache off;
    proxy_buffering off;
    
    # 增加超时时间
    proxy_read_timeout 86400s;
    proxy_send_timeout 86400s;
    
    # 添加CORS支持
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
    
    # 处理OPTIONS请求
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
    }
}

# 确保api路径配置正确
location /api/ {
    proxy_pass http://127.0.0.1:5000/api/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

# 添加此配置检查Socket.IO是否工作
location = /socket-test {
    default_type text/html;
    return 200 '
    <!DOCTYPE html>
    <html>
    <head>
        <title>Socket.IO Test</title>
        <script src="https://cdn.socket.io/4.4.1/socket.io.min.js"></script>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            #status { padding: 10px; border-radius: 5px; }
            .connected { background-color: #d4edda; color: #155724; }
            .disconnected { background-color: #f8d7da; color: #721c24; }
            .reconnecting { background-color: #fff3cd; color: #856404; }
            #messages { height: 300px; overflow-y: auto; border: 1px solid #ccc; padding: 10px; margin: 15px 0; }
            input, button { padding: 5px; margin: 5px 0; }
        </style>
    </head>
    <body>
        <h1>Socket.IO 连接测试</h1>
        <div id="status" class="disconnected">未连接</div>
        <div>
            <input type="text" id="messageInput" placeholder="输入消息..." />
            <button id="sendBtn" disabled>发送</button>
        </div>
        <div id="messages"></div>
        
        <script>
            const statusEl = document.getElementById("status");
            const messagesEl = document.getElementById("messages");
            const messageInput = document.getElementById("messageInput");
            const sendBtn = document.getElementById("sendBtn");
            
            function addMessage(message, type = "info") {
                const msgEl = document.createElement("div");
                msgEl.textContent = `${new Date().toLocaleTimeString()}: ${message}`;
                msgEl.style.color = type === "error" ? "red" : type === "success" ? "green" : "black";
                messagesEl.appendChild(msgEl);
                messagesEl.scrollTop = messagesEl.scrollHeight;
            }
            
            addMessage("正在连接到Socket.IO服务器...");
            
            const socket = io({
                path: "/socket.io",
                transports: ["polling", "websocket"],
                reconnectionAttempts: 5
            });
            
            socket.on("connect", () => {
                statusEl.textContent = `已连接 (ID: ${socket.id})`;
                statusEl.className = "connected";
                sendBtn.disabled = false;
                addMessage(`连接成功! Socket ID: ${socket.id}`, "success");
                addMessage(`传输方式: ${socket.io.engine.transport.name}`, "success");
            });
            
            socket.on("disconnect", (reason) => {
                statusEl.textContent = `连接断开: ${reason}`;
                statusEl.className = "disconnected";
                sendBtn.disabled = true;
                addMessage(`连接断开: ${reason}`, "error");
            });
            
            socket.on("connect_error", (error) => {
                statusEl.textContent = `连接错误: ${error.message}`;
                statusEl.className = "disconnected";
                addMessage(`连接错误: ${error.message}`, "error");
            });
            
            socket.on("reconnect_attempt", (attempt) => {
                statusEl.textContent = `正在尝试重连 #${attempt}`;
                statusEl.className = "reconnecting";
                addMessage(`重连尝试 #${attempt}`);
            });
            
            socket.on("message", (data) => {
                addMessage(`收到消息: ${data}`, "success");
            });
            
            // 发送消息
            sendBtn.addEventListener("click", () => {
                const message = messageInput.value.trim();
                if (message) {
                    socket.emit("message", message);
                    addMessage(`发送消息: ${message}`);
                    messageInput.value = "";
                }
            });
            
            messageInput.addEventListener("keypress", (e) => {
                if (e.key === "Enter") {
                    sendBtn.click();
                }
            });
        </script>
    </body>
    </html>
    ';
} 