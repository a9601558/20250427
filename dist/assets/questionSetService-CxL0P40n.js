const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-CHJFS-BZ.js","assets/index-DnpjnQH9.css"])))=>i.map(i=>d[i]);
import{_ as a}from"./index-CHJFS-BZ.js";const l={async getAllQuestionSets(){try{const{questionSetService:o}=await a(async()=>{const{questionSetService:r}=await import("./index-CHJFS-BZ.js").then(e=>e.a);return{questionSetService:r}},__vite__mapDeps([0,1])),t=await o.getAllQuestionSets();return t.success&&t.data?(console.log(`[QuestionSetService] Fetched ${t.data.length} question sets, adding question counts...`),{success:!0,data:await Promise.all(t.data.map(async e=>{try{const s=await this.getQuestionCount(e.id);if(s>0)return console.log(`[QuestionSetService] Successfully got count for "${e.title}": ${s}`),{...e,questionCount:s};{console.warn(`[QuestionSetService] Zero count for "${e.title}", checking for embedded counts...`);const n=Array.isArray(e.questions)?e.questions.length:0,i=Array.isArray(e.questionSetQuestions)?e.questionSetQuestions.length:0,c=typeof e.questionCount=="number"?e.questionCount:0,u=Math.max(n,i,c);return u>0?(console.log(`[QuestionSetService] Using embedded count for "${e.title}": ${u}`),{...e,questionCount:u}):(console.warn(`[QuestionSetService] Unable to determine count for "${e.title}", using 0`),{...e,questionCount:0})}}catch(s){console.error(`[QuestionSetService] Error getting count for "${e.title}" (${e.id}):`,s);const n=Array.isArray(e.questions)?e.questions.length:0,i=Array.isArray(e.questionSetQuestions)?e.questionSetQuestions.length:0,c=typeof e.questionCount=="number"?e.questionCount:0,u=Math.max(n,i,c);return u>0?(console.log(`[QuestionSetService] Using fallback count for "${e.title}": ${u}`),{...e,questionCount:u}):{...e,questionCount:0}}}))}):t}catch(o){return console.error("[QuestionSetService] Error in getAllQuestionSets:",o),{success:!1,error:o.message}}},async getQuestionSetsByCategory(o){try{const{questionSetService:t}=await a(async()=>{const{questionSetService:r}=await import("./index-CHJFS-BZ.js").then(e=>e.a);return{questionSetService:r}},__vite__mapDeps([0,1]));return t.getQuestionSetsByCategory(o)}catch(t){return{success:!1,error:t.message}}},async getAllCategories(){try{const{questionSetService:o}=await a(async()=>{const{questionSetService:t}=await import("./index-CHJFS-BZ.js").then(r=>r.a);return{questionSetService:t}},__vite__mapDeps([0,1]));return o.getAllCategories()}catch(o){return{success:!1,error:o.message}}},async getQuestionSetById(o){try{const{questionSetService:t}=await a(async()=>{const{questionSetService:r}=await import("./index-CHJFS-BZ.js").then(e=>e.a);return{questionSetService:r}},__vite__mapDeps([0,1]));return t.getQuestionSetById(o)}catch(t){return{success:!1,error:t.message}}},async createQuestionSet(o){try{const{questionSetService:t}=await a(async()=>{const{questionSetService:r}=await import("./index-CHJFS-BZ.js").then(e=>e.a);return{questionSetService:r}},__vite__mapDeps([0,1]));return t.createQuestionSet(o)}catch(t){return{success:!1,error:t.message}}},async updateQuestionSet(o,t){try{const{questionSetService:r}=await a(async()=>{const{questionSetService:e}=await import("./index-CHJFS-BZ.js").then(s=>s.a);return{questionSetService:e}},__vite__mapDeps([0,1]));return r.updateQuestionSet(o,t)}catch(r){return{success:!1,error:r.message}}},async deleteQuestionSet(o){try{const{questionSetService:t}=await a(async()=>{const{questionSetService:r}=await import("./index-CHJFS-BZ.js").then(e=>e.a);return{questionSetService:r}},__vite__mapDeps([0,1]));return t.deleteQuestionSet(o)}catch(t){return{success:!1,error:t.message}}},async updateQuestionCount(o){try{if(console.log(`[QuestionSetService] Updating question count for ${o}`),!o)return console.error("[QuestionSetService] Invalid questionSetId provided to updateQuestionCount"),{success:!1,error:"Invalid question set ID"};const t=await this.getQuestionCount(o);return console.log(`[QuestionSetService] Successfully retrieved count for ${o}: ${t}`),{success:!0,data:{questionCount:t},message:`Updated question count: ${t}`}}catch(t){return console.error(`[QuestionSetService] Error updating question count for ${o}:`,t),{success:!1,error:t.message}}},async getQuestionCount(o){try{if(console.log(`[QuestionSetService] Getting question count for ${o}`),!o)return console.error("[QuestionSetService] Invalid questionSetId provided to getQuestionCount"),0;const t=await fetch(`/api/questions/count/${o}`);if(!t.ok)return console.error(`[QuestionSetService] Error fetching question count: API returned ${t.status}`),0;const r=await t.json();return console.log(`[QuestionSetService] Question count response for ${o}:`,r),r&&typeof r.count=="number"?r.count:r&&r.data&&typeof r.data.count=="number"?r.data.count:r&&typeof r.data=="number"?r.data:(console.warn(`[QuestionSetService] Could not find count in response for ${o}:`,r),0)}catch(t){return console.error(`[QuestionSetService] Error getting question count for ${o}:`,t),0}},async batchAddQuestions(o,t){try{const r=localStorage.getItem("token");if(!r)return{success:!1,error:"Authentication required"};let e=null,s=0;t&&(t(10),e=window.setInterval(()=>{s+=5,s<90&&t(s)},500));const n=o.get("questionSetId");if(!n)return{success:!1,error:"No questionSetId provided"};const i=`/api/questions/batch-upload/${n}`;console.log(`Sending batch upload request to: ${i}`);const c=await fetch(i,{method:"POST",headers:{Authorization:`Bearer ${r}`},body:o});e!==null&&clearInterval(e),t&&t(100);const u=await c.json();if(!c.ok)return console.error(`Batch upload failed: ${c.status} ${c.statusText}`,u),{success:!1,error:u.message||`Server returned ${c.status}`};try{console.log(`[QuestionSetService] Refreshing question count for set ${n}`),await this.updateQuestionCount(n),console.log(`[QuestionSetService] Successfully refreshed question count for set ${n}`)}catch(S){console.error(`[QuestionSetService] Failed to update question count for ${n}:`,S)}return{success:!0,data:{success:u.successCount||0,failed:u.failedCount||0,errors:u.errors||[]},message:u.message||"Questions added successfully"}}catch(r){return console.error("Batch upload error:",r),{success:!1,error:r.message}}},batchCreateQuestionSet:async(o,t)=>{try{return!o.has("file")||!o.has("title")||!o.has("description")||!o.has("category")?(console.error("[QuestionSetService] Missing required fields in FormData"),{success:!1,message:"缺少必要的表单数据",error:"Missing required fields: file, title, description, or category"}):(console.log("[QuestionSetService] Sending batch create question set request"),new Promise((r,e)=>{const s=new XMLHttpRequest;t&&s.upload.addEventListener("progress",i=>{if(i.lengthComputable){const c=Math.round(i.loaded/i.total*100);t(c)}}),s.onload=function(){if(s.status>=200&&s.status<300)try{const i=JSON.parse(s.responseText);r(i)}catch(i){console.error("[QuestionSetService] Error parsing response:",i),e({success:!1,message:"解析响应失败",error:"Error parsing response"})}else console.error("[QuestionSetService] Request failed:",s.statusText),e({success:!1,message:"请求失败",error:s.statusText})},s.onerror=function(){console.error("[QuestionSetService] Network error"),e({success:!1,message:"网络错误",error:"Network error"})},s.open("POST","/api/question-sets/batch-create"),s.send(o)}))}catch(r){return console.error("[QuestionSetService] Batch create question set error:",r),{success:!1,message:"创建题库失败",error:r instanceof Error?r.message:String(r)}}}},f=async(o,t=!1)=>{console.log(`[QuestionSetService] Refreshing counts for ${o.length} question sets (forceAll: ${t})`);const r=await Promise.all(o.map(async e=>{try{if(!e.id)return console.warn("[QuestionSetService] Skipping count refresh for question set with no ID"),e;if(typeof e.questionCount=="number"&&e.questionCount>0&&!t)return console.log(`[QuestionSetService] Skipping refresh for "${e.title}", already has count: ${e.questionCount}`),e;const n=await l.getQuestionCount(e.id);return console.log(`[QuestionSetService] Refreshed count for "${e.title}": ${n}`),{...e,questionCount:n}}catch(s){return console.error(`[QuestionSetService] Error refreshing count for "${e.title}":`,s),e}}));return console.log(`[QuestionSetService] Successfully refreshed ${r.length} question set counts`),r};export{l as default,l as questionSetService,f as refreshQuestionCounts};
