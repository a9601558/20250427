const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-K21LdD4V.js","assets/index-BZKSopkJ.css"])))=>i.map(i=>d[i]);
import{_ as c}from"./index-K21LdD4V.js";const l={async getAllQuestionSets(){try{const{questionSetService:r}=await c(async()=>{const{questionSetService:o}=await import("./index-K21LdD4V.js").then(t=>t.a);return{questionSetService:o}},__vite__mapDeps([0,1])),e=await r.getAllQuestionSets();return e.success&&e.data?(console.log(`[QuestionSetService] Fetched ${e.data.length} question sets, adding question counts...`),{success:!0,data:await Promise.all(e.data.map(async t=>{try{const s=await this.getQuestionCount(t.id);if(s>0)return console.log(`[QuestionSetService] Successfully got count for "${t.title}": ${s}`),{...t,questionCount:s};{console.warn(`[QuestionSetService] Zero count for "${t.title}", checking for embedded counts...`);const i=Array.isArray(t.questions)?t.questions.length:0,a=Array.isArray(t.questionSetQuestions)?t.questionSetQuestions.length:0,u=typeof t.questionCount=="number"?t.questionCount:0,n=Math.max(i,a,u);return n>0?(console.log(`[QuestionSetService] Using embedded count for "${t.title}": ${n}`),{...t,questionCount:n}):(console.warn(`[QuestionSetService] Unable to determine count for "${t.title}", using 0`),{...t,questionCount:0})}}catch(s){console.error(`[QuestionSetService] Error getting count for "${t.title}" (${t.id}):`,s);const i=Array.isArray(t.questions)?t.questions.length:0,a=Array.isArray(t.questionSetQuestions)?t.questionSetQuestions.length:0,u=typeof t.questionCount=="number"?t.questionCount:0,n=Math.max(i,a,u);return n>0?(console.log(`[QuestionSetService] Using fallback count for "${t.title}": ${n}`),{...t,questionCount:n}):{...t,questionCount:0}}}))}):e}catch(r){return console.error("[QuestionSetService] Error in getAllQuestionSets:",r),{success:!1,error:r.message}}},async getQuestionSetsByCategory(r){try{const{questionSetService:e}=await c(async()=>{const{questionSetService:o}=await import("./index-K21LdD4V.js").then(t=>t.a);return{questionSetService:o}},__vite__mapDeps([0,1]));return e.getQuestionSetsByCategory(r)}catch(e){return{success:!1,error:e.message}}},async getAllCategories(){try{const{questionSetService:r}=await c(async()=>{const{questionSetService:e}=await import("./index-K21LdD4V.js").then(o=>o.a);return{questionSetService:e}},__vite__mapDeps([0,1]));return r.getAllCategories()}catch(r){return{success:!1,error:r.message}}},async getQuestionSetById(r){try{const{questionSetService:e}=await c(async()=>{const{questionSetService:o}=await import("./index-K21LdD4V.js").then(t=>t.a);return{questionSetService:o}},__vite__mapDeps([0,1]));return e.getQuestionSetById(r)}catch(e){return{success:!1,error:e.message}}},async createQuestionSet(r){try{const{questionSetService:e}=await c(async()=>{const{questionSetService:o}=await import("./index-K21LdD4V.js").then(t=>t.a);return{questionSetService:o}},__vite__mapDeps([0,1]));return e.createQuestionSet(r)}catch(e){return{success:!1,error:e.message}}},async updateQuestionSet(r,e){try{const{questionSetService:o}=await c(async()=>{const{questionSetService:t}=await import("./index-K21LdD4V.js").then(s=>s.a);return{questionSetService:t}},__vite__mapDeps([0,1]));return o.updateQuestionSet(r,e)}catch(o){return{success:!1,error:o.message}}},async deleteQuestionSet(r){try{const{questionSetService:e}=await c(async()=>{const{questionSetService:o}=await import("./index-K21LdD4V.js").then(t=>t.a);return{questionSetService:o}},__vite__mapDeps([0,1]));return e.deleteQuestionSet(r)}catch(e){return{success:!1,error:e.message}}},async updateQuestionCount(r){try{if(console.log(`[QuestionSetService] Updating question count for ${r}`),!r)return console.error("[QuestionSetService] Invalid questionSetId provided to updateQuestionCount"),{success:!1,error:"Invalid question set ID"};const e=await this.getQuestionCount(r);return console.log(`[QuestionSetService] Successfully retrieved count for ${r}: ${e}`),{success:!0,data:{questionCount:e},message:`Updated question count: ${e}`}}catch(e){return console.error(`[QuestionSetService] Error updating question count for ${r}:`,e),{success:!1,error:e.message}}},async getQuestionCount(r){try{if(console.log(`[QuestionSetService] Getting question count for ${r}`),!r)return console.error("[QuestionSetService] Invalid questionSetId provided to getQuestionCount"),0;const e=await fetch(`/api/questions/count/${r}`);if(!e.ok)return console.error(`[QuestionSetService] Error fetching question count: API returned ${e.status}`),0;const o=await e.json();return console.log(`[QuestionSetService] Question count response for ${r}:`,o),o&&typeof o.count=="number"?o.count:o&&o.data&&typeof o.data.count=="number"?o.data.count:o&&typeof o.data=="number"?o.data:(console.warn(`[QuestionSetService] Could not find count in response for ${r}:`,o),0)}catch(e){return console.error(`[QuestionSetService] Error getting question count for ${r}:`,e),0}},async batchAddQuestions(r,e){try{const o=localStorage.getItem("token");if(!o)return{success:!1,error:"Authentication required"};let t=null,s=0;e&&(e(10),t=window.setInterval(()=>{s+=5,s<90&&e(s)},500));const i=r.get("questionSetId");if(!i)return{success:!1,error:"No questionSetId provided"};const a=`/api/questions/batch-upload/${i}`;console.log(`Sending batch upload request to: ${a}`);const u=await fetch(a,{method:"POST",headers:{Authorization:`Bearer ${o}`},body:r});t!==null&&clearInterval(t),e&&e(100);const n=await u.json();if(!u.ok)return console.error(`Batch upload failed: ${u.status} ${u.statusText}`,n),{success:!1,error:n.message||`Server returned ${u.status}`};try{console.log(`[QuestionSetService] Refreshing question count for set ${i}`),await this.updateQuestionCount(i),console.log(`[QuestionSetService] Successfully refreshed question count for set ${i}`)}catch(S){console.error(`[QuestionSetService] Failed to update question count for ${i}:`,S)}return{success:!0,data:{success:n.successCount||0,failed:n.failedCount||0,errors:n.errors||[]},message:n.message||"Questions added successfully"}}catch(o){return console.error("Batch upload error:",o),{success:!1,error:o.message}}}},v=async r=>{console.log(`[QuestionSetService] Refreshing counts for ${r.length} question sets`);const e=await Promise.all(r.map(async o=>{try{if(!o.id)return console.warn("[QuestionSetService] Skipping count refresh for question set with no ID"),o;const t=await l.getQuestionCount(o.id);return console.log(`[QuestionSetService] Refreshed count for "${o.title}": ${t}`),{...o,questionCount:t}}catch(t){return console.error(`[QuestionSetService] Error refreshing count for "${o.title}":`,t),o}}));return console.log(`[QuestionSetService] Successfully refreshed ${e.length} question set counts`),e};export{l as default,l as questionSetService,v as refreshQuestionCounts};
