const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-z0NrLXtI.js","assets/index-CjScWo3q.css"])))=>i.map(i=>d[i]);
import{_ as n}from"./index-z0NrLXtI.js";const l={async getAllQuestionSets(){try{const{questionSetService:t}=await n(async()=>{const{questionSetService:r}=await import("./index-z0NrLXtI.js").then(s=>s.a);return{questionSetService:r}},__vite__mapDeps([0,1])),e=await t.getAllQuestionSets();return e.success&&e.data?{success:!0,data:await Promise.all(e.data.map(async s=>{const o=await this.getQuestionCount(s.id);return{...s,questionCount:o}}))}:e}catch(t){return{success:!1,error:t.message}}},async getQuestionSetsByCategory(t){try{const{questionSetService:e}=await n(async()=>{const{questionSetService:r}=await import("./index-z0NrLXtI.js").then(s=>s.a);return{questionSetService:r}},__vite__mapDeps([0,1]));return e.getQuestionSetsByCategory(t)}catch(e){return{success:!1,error:e.message}}},async getAllCategories(){try{const{questionSetService:t}=await n(async()=>{const{questionSetService:e}=await import("./index-z0NrLXtI.js").then(r=>r.a);return{questionSetService:e}},__vite__mapDeps([0,1]));return t.getAllCategories()}catch(t){return{success:!1,error:t.message}}},async getQuestionSetById(t){try{const{questionSetService:e}=await n(async()=>{const{questionSetService:r}=await import("./index-z0NrLXtI.js").then(s=>s.a);return{questionSetService:r}},__vite__mapDeps([0,1]));return e.getQuestionSetById(t)}catch(e){return{success:!1,error:e.message}}},async createQuestionSet(t){try{const{questionSetService:e}=await n(async()=>{const{questionSetService:r}=await import("./index-z0NrLXtI.js").then(s=>s.a);return{questionSetService:r}},__vite__mapDeps([0,1]));return e.createQuestionSet(t)}catch(e){return{success:!1,error:e.message}}},async updateQuestionSet(t,e){try{const{questionSetService:r}=await n(async()=>{const{questionSetService:s}=await import("./index-z0NrLXtI.js").then(o=>o.a);return{questionSetService:s}},__vite__mapDeps([0,1]));return r.updateQuestionSet(t,e)}catch(r){return{success:!1,error:r.message}}},async deleteQuestionSet(t){try{const{questionSetService:e}=await n(async()=>{const{questionSetService:r}=await import("./index-z0NrLXtI.js").then(s=>s.a);return{questionSetService:r}},__vite__mapDeps([0,1]));return e.deleteQuestionSet(t)}catch(e){return{success:!1,error:e.message}}},async updateQuestionCount(t){try{return await(await fetch(`/api/question-sets/${t}/count`,{method:"PUT",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`}})).json()}catch(e){return{success:!1,error:e.message}}},async getQuestionCount(t){try{const e=await fetch(`/api/questions/count/${t}`);if(!e.ok)return console.error(`Error fetching question count: API returned ${e.status}`),0;const r=await e.json();return console.log(`Question count response for ${t}:`,r),r.count||0}catch(e){return console.error("Error getting question count:",e),0}},async batchAddQuestions(t,e){try{const r=localStorage.getItem("token");if(!r)return{success:!1,error:"Authentication required"};let s=null,o=0;e&&(e(10),s=window.setInterval(()=>{o+=5,o<90&&e(o)},500));const a=t.get("questionSetId");if(!a)return{success:!1,error:"No questionSetId provided"};const c=await fetch(`/api/questions/batch-upload/${a}`,{method:"POST",headers:{Authorization:`Bearer ${r}`},body:t});s!==null&&clearInterval(s),e&&e(100);const i=await c.json();return c.ok?(this.updateQuestionCount(a).catch(u=>console.error(`Failed to update question count for ${a}:`,u)),{success:!0,data:{success:i.successCount||0,failed:i.failedCount||0,errors:i.errors||[]},message:i.message||"Questions added successfully"}):{success:!1,error:i.message||`Server returned ${c.status}`}}catch(r){return{success:!1,error:r.message}}}};export{l as default,l as questionSetService};
