const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-Ce_oPpAc.js","assets/index-BZKSopkJ.css"])))=>i.map(i=>d[i]);
import{_ as i}from"./index-Ce_oPpAc.js";const d={async getAllQuestionSets(){try{const{questionSetService:r}=await i(async()=>{const{questionSetService:t}=await import("./index-Ce_oPpAc.js").then(s=>s.a);return{questionSetService:t}},__vite__mapDeps([0,1])),e=await r.getAllQuestionSets();return e.success&&e.data?(console.log(`[QuestionSetService] Fetched ${e.data.length} question sets, adding question counts...`),{success:!0,data:await Promise.all(e.data.map(async s=>{try{const o=await fetch(`/api/questions/count/${s.id}`);let n=0;return o.ok?(n=(await o.json()).count||0,console.log(`[QuestionSetService] Question count for ${s.id}: ${n}`)):console.error(`[QuestionSetService] Failed to get count for ${s.id}: ${o.status}`),{...s,questionCount:n}}catch(o){return console.error(`[QuestionSetService] Error getting count for ${s.id}:`,o),{...s,questionCount:0}}}))}):e}catch(r){return console.error("[QuestionSetService] Error in getAllQuestionSets:",r),{success:!1,error:r.message}}},async getQuestionSetsByCategory(r){try{const{questionSetService:e}=await i(async()=>{const{questionSetService:t}=await import("./index-Ce_oPpAc.js").then(s=>s.a);return{questionSetService:t}},__vite__mapDeps([0,1]));return e.getQuestionSetsByCategory(r)}catch(e){return{success:!1,error:e.message}}},async getAllCategories(){try{const{questionSetService:r}=await i(async()=>{const{questionSetService:e}=await import("./index-Ce_oPpAc.js").then(t=>t.a);return{questionSetService:e}},__vite__mapDeps([0,1]));return r.getAllCategories()}catch(r){return{success:!1,error:r.message}}},async getQuestionSetById(r){try{const{questionSetService:e}=await i(async()=>{const{questionSetService:t}=await import("./index-Ce_oPpAc.js").then(s=>s.a);return{questionSetService:t}},__vite__mapDeps([0,1]));return e.getQuestionSetById(r)}catch(e){return{success:!1,error:e.message}}},async createQuestionSet(r){try{const{questionSetService:e}=await i(async()=>{const{questionSetService:t}=await import("./index-Ce_oPpAc.js").then(s=>s.a);return{questionSetService:t}},__vite__mapDeps([0,1]));return e.createQuestionSet(r)}catch(e){return{success:!1,error:e.message}}},async updateQuestionSet(r,e){try{const{questionSetService:t}=await i(async()=>{const{questionSetService:s}=await import("./index-Ce_oPpAc.js").then(o=>o.a);return{questionSetService:s}},__vite__mapDeps([0,1]));return t.updateQuestionSet(r,e)}catch(t){return{success:!1,error:t.message}}},async deleteQuestionSet(r){try{const{questionSetService:e}=await i(async()=>{const{questionSetService:t}=await import("./index-Ce_oPpAc.js").then(s=>s.a);return{questionSetService:t}},__vite__mapDeps([0,1]));return e.deleteQuestionSet(r)}catch(e){return{success:!1,error:e.message}}},async updateQuestionCount(r){try{return await(await fetch(`/api/question-sets/${r}/count`,{method:"PUT",headers:{Authorization:`Bearer ${localStorage.getItem("token")}`}})).json()}catch(e){return{success:!1,error:e.message}}},async getQuestionCount(r){try{if(console.log(`[QuestionSetService] Getting question count for ${r}`),!r)return console.error("[QuestionSetService] Invalid questionSetId provided to getQuestionCount"),0;const e=await fetch(`/api/questions/count/${r}`);if(!e.ok)return console.error(`[QuestionSetService] Error fetching question count: API returned ${e.status}`),0;const t=await e.json();return console.log(`[QuestionSetService] Question count response for ${r}:`,t),t.success&&typeof t.count=="number"||typeof t.count=="number"?t.count:t.data&&typeof t.data.count=="number"?t.data.count:(console.warn("[QuestionSetService] Could not find count in API response:",t),0)}catch(e){return console.error("[QuestionSetService] Error getting question count:",e),0}},async batchAddQuestions(r,e){try{const t=localStorage.getItem("token");if(!t)return{success:!1,error:"Authentication required"};let s=null,o=0;e&&(e(10),s=window.setInterval(()=>{o+=5,o<90&&e(o)},500));const n=r.get("questionSetId");if(!n)return{success:!1,error:"No questionSetId provided"};const a=`/api/questions/batch-upload/${n}`;console.log(`Sending batch upload request to: ${a}`);const u=await fetch(a,{method:"POST",headers:{Authorization:`Bearer ${t}`},body:r});s!==null&&clearInterval(s),e&&e(100);const c=await u.json();return u.ok?(this.updateQuestionCount(n).catch(S=>console.error(`Failed to update question count for ${n}:`,S)),{success:!0,data:{success:c.successCount||0,failed:c.failedCount||0,errors:c.errors||[]},message:c.message||"Questions added successfully"}):(console.error(`Batch upload failed: ${u.status} ${u.statusText}`,c),{success:!1,error:c.message||`Server returned ${u.status}`})}catch(t){return console.error("Batch upload error:",t),{success:!1,error:t.message}}}};export{d as default,d as questionSetService};
