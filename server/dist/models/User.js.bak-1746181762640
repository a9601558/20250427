
// Sequelize Instance Recovery - 自动添加于 2025-05-02T10:27:26.516Z
// 这段代码确保Sequelize模型总是有有效的实例，即使在模块导入失败的情况下
(function() {
  try {
    // 修复空的sequelize实例
    if (typeof global.sequelize === 'undefined' && 
        (typeof sequelize === 'undefined' || !sequelize)) {
      const { Sequelize } = require('sequelize');
      const path = require('path');
      const fs = require('fs');
      const dotenv = require('dotenv');
      
      // 加载环境变量
      const envPath = path.join(process.cwd(), '.env');
      if (fs.existsSync(envPath)) {
        console.log('Recovery: 加载环境变量文件', envPath);
        dotenv.config({ path: envPath });
      }
      
      console.log('Recovery: 创建应急Sequelize实例');
      global.sequelize = new Sequelize(
        process.env.DB_NAME || 'quiz_app',
        process.env.DB_USER || 'root',
        process.env.DB_PASSWORD || '',
        {
          host: process.env.DB_HOST || 'localhost',
          port: parseInt(process.env.DB_PORT || '3306'),
          dialect: 'mysql',
          logging: false,
          pool: { max: 5, min: 0, acquire: 30000, idle: 10000 }
        }
      );
      
      // 设置全局变量，避免"未定义"错误
      if (typeof sequelize === 'undefined') {
        global.sequelize = global.sequelize;
      }
    }
  } catch (error) {
    console.error('Recovery: Sequelize恢复机制出错', error);
  }
})();
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const sequelize_1 = require("sequelize");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const dotenv_1 = __importDefault(require("dotenv"));
const bcrypt_1 = __importDefault(require("bcrypt"));
const logger_1 = require("../utils/logger");
// 尝试导入数据库配置，但提供可靠的回退机制
let sequelize;
try {
    // 尝试标准导入
    const db = require('../config/database');
    sequelize = db.default || db;
    // 验证sequelize实例是否有效
    if (!sequelize || typeof sequelize.define !== 'function') {
        throw new Error('导入的sequelize实例无效');
    }
    logger_1.logger.info('成功从配置文件导入Sequelize实例');
}
catch (error) {
    logger_1.logger.warn('无法从配置文件导入Sequelize实例，创建内置实例:', error);
    // 加载环境变量
    const envPath = path_1.default.join(process.cwd(), '.env');
    if (fs_1.default.existsSync(envPath)) {
        logger_1.logger.info(`加载环境变量文件: ${envPath}`);
        dotenv_1.default.config({ path: envPath });
    }
    // 手动创建Sequelize实例
    sequelize = new sequelize_1.Sequelize(process.env.DB_NAME || 'quiz_app', process.env.DB_USER || 'root', process.env.DB_PASSWORD || '', {
        host: process.env.DB_HOST || 'localhost',
        port: parseInt(process.env.DB_PORT || '3306', 10),
        dialect: 'mysql',
        logging: (msg) => logger_1.logger.debug(msg),
        pool: {
            max: 5,
            min: 0,
            acquire: 30000,
            idle: 10000
        },
        dialectOptions: {
            connectTimeout: 10000
        }
    });
    // 为了安全起见，添加到global对象，确保其他模型能找到
    global.sequelize = sequelize;
}
// 确保sequelize实例确实存在，即使上面的代码失败也提供兜底方案
if (!sequelize) {
    logger_1.logger.error('严重错误: 无法创建Sequelize实例，使用应急方案');
    sequelize = new sequelize_1.Sequelize('sqlite::memory:');
    global.sequelize = sequelize;
}
class User extends sequelize_1.Model {
    async comparePassword(candidatePassword) {
        try {
            if (!this.password) {
                logger_1.logger.error('Cannot compare password: User password is empty or undefined');
                return false;
            }
            if (!candidatePassword) {
                logger_1.logger.error('Cannot compare password: Candidate password is empty or undefined');
                return false;
            }
            logger_1.logger.debug('Comparing passwords, user password exists:', !!this.password, 'length:', this.password.length);
            const isMatch = await bcrypt_1.default.compare(candidatePassword, this.password);
            logger_1.logger.debug('Password comparison result:', isMatch);
            return isMatch;
        }
        catch (error) {
            logger_1.logger.error('Password comparison error:', error);
            return false;
        }
    }
    // 用于安全地返回用户数据（不包含敏感信息）
    toSafeObject() {
        const { password, ...safeUser } = this.toJSON();
        return safeUser;
    }
}
exports.User = User;
// 添加明确的sequelize实例检查
const initUserModel = () => {
    try {
        // 确保我们使用的sequelize实例有效
        if (!sequelize || typeof sequelize.define !== 'function') {
            logger_1.logger.error('初始化User模型失败: 无效的Sequelize实例');
            // 紧急恢复: 重新创建Sequelize实例
            sequelize = new sequelize_1.Sequelize(process.env.DB_NAME || 'quiz_app', process.env.DB_USER || 'root', process.env.DB_PASSWORD || '', {
                host: process.env.DB_HOST || 'localhost',
                port: parseInt(process.env.DB_PORT || '3306', 10),
                dialect: 'mysql',
                logging: (msg) => logger_1.logger.debug(msg)
            });
        }
        // 初始化User模型
        User.init({
            id: {
                type: sequelize_1.DataTypes.UUID,
                defaultValue: sequelize_1.DataTypes.UUIDV4,
                primaryKey: true,
            },
            username: {
                type: sequelize_1.DataTypes.STRING(50),
                allowNull: false,
                unique: true,
                validate: {
                    notEmpty: { msg: '用户名不能为空' },
                    len: {
                        args: [3, 30],
                        msg: '用户名长度必须在3-30个字符之间',
                    },
                },
            },
            email: {
                type: sequelize_1.DataTypes.STRING(100),
                allowNull: false,
                unique: true,
                validate: {
                    isEmail: { msg: '请输入有效的邮箱地址' },
                    notEmpty: { msg: '邮箱不能为空' },
                },
            },
            password: {
                type: sequelize_1.DataTypes.STRING(255),
                allowNull: false,
                validate: {
                    notEmpty: { msg: '密码不能为空' },
                    len: {
                        args: [6, 100],
                        msg: '密码长度必须在6-100个字符之间',
                    },
                },
            },
            isAdmin: {
                type: sequelize_1.DataTypes.BOOLEAN,
                allowNull: false,
                defaultValue: false,
            },
            socket_id: {
                type: sequelize_1.DataTypes.STRING(255),
                allowNull: true,
                defaultValue: null,
                comment: '用户Socket连接ID',
            },
            purchases: {
                type: sequelize_1.DataTypes.JSON,
                allowNull: false,
                defaultValue: [],
            },
            redeemCodes: {
                type: sequelize_1.DataTypes.JSON,
                allowNull: true,
                defaultValue: [],
            },
            progress: {
                type: sequelize_1.DataTypes.JSON,
                allowNull: true,
                defaultValue: {},
            },
            examCountdowns: {
                type: sequelize_1.DataTypes.JSON,
                allowNull: true,
                defaultValue: '[]',
                comment: '用户保存的考试倒计时数据',
            },
            createdAt: {
                type: sequelize_1.DataTypes.DATE,
                allowNull: false,
                defaultValue: sequelize_1.DataTypes.NOW,
            },
            updatedAt: {
                type: sequelize_1.DataTypes.DATE,
                allowNull: false,
                defaultValue: sequelize_1.DataTypes.NOW,
            },
        }, {
            sequelize,
            modelName: 'User',
            tableName: 'users',
            timestamps: true,
            defaultScope: {
                attributes: { exclude: ['password'] },
            },
            scopes: {
                withPassword: {
                    attributes: { include: ['password'] },
                },
            },
        });
        logger_1.logger.info('User模型初始化成功');
        return true;
    }
    catch (error) {
        logger_1.logger.error('User模型初始化失败:', error);
        return false;
    }
};
// 初始化User模型并处理可能的错误
if (!initUserModel()) {
    logger_1.logger.error('警告: User模型初始化失败，应用可能无法正常工作');
}
// 密码加密钩子
User.beforeSave(async (user) => {
    try {
        // 记录当前状态以便调试
        logger_1.logger.debug('beforeSave hook called, password changed:', user.changed('password'));
        if (user.changed('password')) {
            // 确保密码不为空或undefined
            if (!user.password) {
                logger_1.logger.warn('Password is empty in beforeSave hook');
                throw new Error('密码不能为空');
            }
            logger_1.logger.debug('Password exists and will be hashed');
            // 确保密码是字符串类型
            if (typeof user.password !== 'string') {
                logger_1.logger.warn('Password is not a string, converting from type:', typeof user.password);
                user.password = String(user.password);
            }
            const salt = await bcrypt_1.default.genSalt(10);
            user.password = await bcrypt_1.default.hash(user.password, salt);
            logger_1.logger.debug('Password successfully hashed');
        }
    }
    catch (error) {
        logger_1.logger.error('Password hashing error:', error.message, error.stack);
        // 提供更具体的错误信息
        if (error.message?.includes('illegal arguments')) {
            throw new Error('密码格式不正确，无法加密');
        }
        else if (error.message?.includes('密码不能为空')) {
            throw new Error('密码不能为空');
        }
        else {
            throw new Error(`密码加密失败: ${error.message}`);
        }
    }
});
// 数据验证钩子
User.beforeValidate((user) => {
    // 清理用户输入
    if (user.username) {
        user.username = user.username.trim();
    }
    if (user.email) {
        user.email = user.email.trim().toLowerCase();
    }
});
// 创建用户时的初始化钩子
User.beforeCreate((user) => {
    // 初始化默认值
    if (!user.purchases)
        user.purchases = [];
    if (!user.redeemCodes)
        user.redeemCodes = [];
    logger_1.logger.debug('用户初始化默认值完成');
});
exports.default = User;
